from Crypto.PublicKey import RSA
from Crypto.Util.number import getPrime,isPrime,inverse
from sage.all import cos,floor,sqrt



def main():
    p = getPrime(2048)
    q = getPrime(2048)
    N = p*q
    print(floor(sqrt(q)))
    print(cos(floor(sqrt(q))).n(4096))
    # -0.34363653636806217882807673457845712405112443014936112283546327402692735080797486287270458171399187210830608411217075676333831917234373746592625371924211215048628867864388238188711367958320857332718117573320841531117716056264294917102397722814402854019705376161837188748905340662851585224918280180372874661991797707837349939729825699693187164581194762125219668241843378111837327128147124346836681370299854693923373428859267989946962834689979286517287913538817449658531454571465597112616827611838125791831449163590306457589953093247135633467395738557450649875922198290627752438647609543986236573910274030911205429489597038568719174380501041631959428492917646562787570922332738533186989627813234977476628368390512688365880688441837996023433434271324058935015936295920264066636738687408912518503404373296509444428251325829564993208807594433038187218785822281741115827352533496866757233389046909611162431063458980223693658782255236365677057043246877282405822351500125368798082635803092603612353669381215102543090972837399176073406963289335379759389857595087490312486759363383315118768199530441632497192680647308107163857145929466651146322613093345175881534093722069533612912821124489364805265916841964868898301295738141354500515280627269
    e = 0x10001
    priv = RSA.construct((p*q, e, inverse(e, (p - 1) * (q - 1))))
    with open("priv.pem",'wb') as f:
        f.write(priv.exportKey('PEM'))


if __name__ == '__main__':
    main()